@using CollegeVotingSystem.Models
@{
    ViewBag.Title = "Identify Person";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="pagetitle">
    <h1>Identify Person</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "User")">User</a></li>
            <li class="breadcrumb-item active">@ViewBag.Title</li>
        </ol>
    </nav>
</div>

<div class="row g-2">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="card-title">@ViewBag.Title</div>
                <div class="row g-5">
                    <div class="col-md-4">
                        <div class="row mb-3">
                            <label class="col-form-label col-md-4">READER</label>
                            <div class="col-md-8">
                                <span id="messageoutput"></span>
                                <select id="readers" class="form-select">
                                    <option value="">Select Reader</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div id="scanned" class="col-md-8 offset-md-4">
                            
                            </div>
                        </div>
                    </div>
                    <div id="person_ident" class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="card-title">Information</div>
                                <div class="row">
                                    <div class="col-md-3 text-end">

                                    </div>
                                    <div class="col-md-9">
                                        <h4 id="fullname"></h4>
                                        <span id="course"></span><br />
                                        <span id="studentid"><b></b></span><br />
                                        <span id="age"></span><br />
                                    </div>
                                </div>
                            </div>
                        </div>
                       
                    </div>
                </div>
               
             
            </div>
        </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

        var test = null;

        var myVal = ""; // Drop down selected value of reader 

        var currentFormat = Fingerprint.SampleFormat.PngImage;

        var FingerprintSdkTest = (function () {
            function FingerprintSdkTest() {
                var _instance = this;
                this.operationToRestart = null;
                this.acquisitionStarted = false;
                this.sdk = new Fingerprint.WebApi;
                this.sdk.onDeviceConnected = function (e) {
                    // Detects if the deveice is connected for which acquisition started
                    showMessage("Scan your finger");
                };
                this.sdk.onDeviceDisconnected = function (e) {
                    // Detects if device gets disconnected - provides deviceUid of disconnected device
                    showMessage("Device disconnected");
                };
                this.sdk.onCommunicationFailed = function (e) {
                    // Detects if there is a failure in communicating with U.R.U web SDK
                    showMessage("Communinication Failed")
                };
                this.sdk.onSamplesAcquired = function (s) {
                    // Sample acquired event triggers this function
                    sampleAcquired(s);
                };
                this.sdk.onQualityReported = function (e) {
                   
                }

            }

            FingerprintSdkTest.prototype.startCapture = function () {
                if (this.acquisitionStarted) // Monitoring if already started capturing
                    return;
                var _instance = this;
                showMessage("");
                this.operationToRestart = this.startCapture;
                this.sdk.startAcquisition(currentFormat, myVal).then(function () {
                    _instance.acquisitionStarted = true;

                }, function (error) {
                    showMessage(error.message);
                });
            };
            FingerprintSdkTest.prototype.stopCapture = function () {
                if (!this.acquisitionStarted) //Monitor if already stopped capturing
                    return;
                var _instance = this;
                showMessage("");
                this.sdk.stopAcquisition().then(function () {
                    _instance.acquisitionStarted = false;

                    //Disabling stop once stoped
                    disableEnableStartStop();

                }, function (error) {
                    showMessage(error.message);
                });
            };

            FingerprintSdkTest.prototype.getInfo = function () {
                var _instance = this;
                return this.sdk.enumerateDevices();
            };

            FingerprintSdkTest.prototype.getDeviceInfoWithID = function (uid) {
                var _instance = this;
                return this.sdk.getDeviceInfo(uid);
            };


            return FingerprintSdkTest;
        })();

        function showMessage(message) {
            $('#messageoutput').text(message);
        }

        window.onload = function () {
            test = new FingerprintSdkTest();
            readersDropDownPopulate(() => {
                test.startCapture();
            });
       
        };


        var findPerson = (s) => {
            var data = new FormData();
            data.append('base64', s);
            $.ajax({
                type: 'post',
                url: '@Url.Action("Identify", "User")',
                data: data,
                processData: false,
                contentType: false,
                dataType: 'json',
                success: (d) => {
                    if (d.Message == "Verified") {
                        var item = d.item;
                        if (item.Img64) {
                            $('#person_ident .row .col-md-3').html(`<img src="${item.Img64}" width="150"/>`);
                        } else {
                            $('#person_ident .row .col-md-3').html(`<img src="@Url.Content("~/Content/Img/noimage-available.jpeg")" width="150"/>`);
                        }
                        $('#fullname').html(`Fullname: ${item.Fullname}`);
                        $('#course').html(`Course: ${item.CourseName}`);
                        $('#studentid').html(`Student ID: ${item.StudentID}`);
                        $('#age').html(`${item.Age} Years Old`);
                    } else {
                        $('#person_ident .row .col-md-3').html(`<img src="@Url.Content("~/Content/Img/noimage-available.jpeg")" width="150"/>`);
                        $('#fullname').html(`Fullname: N/A`);
                        $('#course').html(`Course: N/A`);
                        $('#studentid').html(`Student ID: N/A`);
                        $('#age').html(`N/A`);
                    }
                    
                }
            });
        }

        function sampleAcquired(s) {
            var samples = JSON.parse(s.samples);
            findPerson(Fingerprint.b64UrlTo64(samples[0]));
            $('#scanned').html('<img src="" alt="Fingerprint" width="300" height="300" />');
            $('#scanned img').attr('src', `data:image/png;base64,${Fingerprint.b64UrlTo64(samples[0])}`);
        }

        function readersDropDownPopulate(cb) { // Check for redirecting is a boolean value which monitors to redirect to content tab or not
            myVal = "";
            var allReaders = test.getInfo();
            allReaders.then(function (sucessObj) {
                var readersDropDownElement = document.getElementById("readers");
                readersDropDownElement.innerHTML = "";
                //First ELement
                var option = document.createElement("option");
                option.selected = "selected";
                option.value = "";
                option.text = "Select Reader";
                readersDropDownElement.add(option);
                for (i = 0; i < sucessObj.length; i++) {
                    var option = document.createElement("option");
                    option.value = sucessObj[i];
                    option.text = sucessObj[i];
                    readersDropDownElement.add(option);
                }

                //Check if readers are available get count and  provide user information if no reader available, 
                //if only one reader available then select the reader by default and sennd user to capture tab
                cb(checkReaderCount(sucessObj));
            }, function (error) {
                showMessage(error.message);
            });
        }

        function checkReaderCount(sucessObj) {
            if (sucessObj.length == 0) {
                alert("No reader detected. Please connect a reader.");
            } else if (sucessObj.length == 1) {
                document.getElementById("readers").selectedIndex = "1";
            }
            selectChangeEvent(); // To make the reader selected
        }

        function selectChangeEvent() {
            var readersDropDownElement = document.getElementById("readers");
            myVal = readersDropDownElement.options[readersDropDownElement.selectedIndex].value;
        }


    </script>
}
